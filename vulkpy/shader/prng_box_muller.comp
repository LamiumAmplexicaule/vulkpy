#version 460
layout(local_size_x = 64) in;


layout(push_constant) uniform constants {
  uint size;
  float scalar[2]; // [mean, stddev]
} params;


layout(std430, binding = 0) readonly buffer A {
  float a[]; // Uniform Distribution bewteen [0, 1).
};
layout(std430, binding = 1) writeonly buffer B {
  float b[];
};


void main(){
  const uint i = gl_GlobalInvocationID.x;
  const uint j = 2*i;
  const uint k = j + 1;
  if(j >= params.size){ return; }

  const float r = sqrt(-2 * log(1.0 - a[j])) * params.scalar[1];
  const float angle = 6.28318530718f * a[k];

  b[j] = params.scalar[0] + r * sin(angle);

  if(k >= params.size){ return; }
  b[k] = params.scalar[0] + r * cos(angle);
}
